xquery version "3.0";

module namespace app="http://github.com/Capitains/InventoryMaker/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;

import module namespace config="http://github.com/Capitains/InventoryMaker/config" at "config.xqm";
import module namespace ctsh="http://github.com/Capitains/InventoryMaker/cts-helper" at "./cts.xql";
import module namespace cud="http://github.com/Capitains/InventoryMaker/cud" at "./cud.xql";
import module namespace resource="http://github.com/Capitains/InventoryMaker/resource" at "./resource.xql";

declare namespace ti="http://chs.harvard.edu/xmlns/cts";
declare namespace ti3="http://chs.harvard.edu/xmlns/cts3/ti";

declare variable $app:conf := doc("../conf/conf.xml");
declare variable $app:inventories := collection(fn:string($app:conf//repositories/@inventoryCollection));
declare variable $app:POST := request:get-data();
(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:listInventories($node as node(), $model as map(*)) {
    <select name="inventory">
        {
            for $inventory in xmldb:get-child-resources(fn:string($app:conf//repositories/@inventoryCollection))
                return element option {
                    attribute value { $inventory },
                    $inventory
                }
        }
    </select>
};

declare function app:getEnv() {
    let $status := request:get-parameter("status", "create")
    let $name := 
        if ($status = "create")
        then
            request:get-parameter("inventoryname", "new")
        else
            request:get-parameter("inventory", "")
    return 
        element conf {
            element mode {
                $status
            },
            element target {
                $name
            }
        }
};

declare function app:listResources($node as node(), $model as map(*)) {
    <ol class="cts vertical cts-source">
        {
            resource:formatResources(
                resource:getResources(), 
                resource:getCapabilities(app:getEnv()//target/text())
            )
        }
    </ol>
};

declare function app:InventoryTitle($node as node(), $model as map(*)) {
    let $title := app:getEnv()//target/text()
    return
    element h3 {
        resource:getInventoryPath($title),
        element input {
            attribute type { "hidden" },
            attribute name { "inventory" },
            attribute value { $title }
        }
    }
};

declare function app:getInventory($node as node(), $model as map(*)) {
    <ol class="cts vertical cts-target" style="min-height:10px; border:1px dashed black;">
        {
            let $conf := app:getEnv()
            return
                if ($conf//mode/text() = "create")
                then
                    <li>Drop data here</li>
                else
                    <li>{resource:formatResources(resource:getCapabilities($conf//target/text()), ())}</li>
        
        }
    </ol>
};

declare function app:generateInventory($node as node(), $model as map(*)) {
    element div {
        element textarea {
            attribute name { "inventory-doc" },
            serialize(
                ctsh:generateInventory(
                    request:get-parameter("inventory", "error.xml"),
                    request:get-parameter("textgroup[]", ()),
                    request:get-parameter("work[]", ()),
                    request:get-parameter("text[]", ())
                )
            )
        },
        element input {
            attribute type { "hidden" },
            attribute name { "inventory" },
            attribute value { request:get-parameter("inventory", "") }
        }
    }
    
};

declare function app:confirmInventory($node as node(), $model as map(*)) {
    <input type="submit" name="submit" class="btn btn-primary" value="Confirm edition of {request:get-parameter("inventory", "") } ?" />
};

declare function app:create($node as node(), $model as map(*)) {
    element h3 {
        cud:create()
    }
};